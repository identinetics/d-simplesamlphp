#!/usr/bin/env bash

# settings for docker build, run and exec

main() {
  init_sudo
  set_volume_mapping
  set_image_and_container_name
  set_users
  set_buildargs
  set_run_args
  set_network
  set_vol_mapping
  #enable_x11_client
  #enablet_pkcs11
  #enable_sshd()     # usually used only for debugging - requires installed sshd in image
}


set_volume_mapping() {
    DOCKERVOL_ROOT='/docker_volumes'
    #SHAREDDATA_ROOT="${DOCKERVOL_ROOT}/01shared_data"    # data shared between containers
}


set_image_and_container_name() {
    # This IMGID qualifies image, container, user and IP adddress; this is helpful for managing
    # processes on the docker host etc.
    IMGID='99'  # range from 02 .. 99; must be unique per node
    PROJSHORT='ssp'
    export IMAGENAME="r2h2/$PROJSHORT${IMGID}"
    export CONTAINERNAME="${IMGID}$PROJSHORT"
}


set_users() {
    export CONTAINERUSER="$PROJSHORT${IMGID}"   # group and user to run container
    export CONTAINERUID="33"     # synonymous with www-data
    export START_AS_ROOT='True'  # (e.g. for apache to fall back to www user)
}


set_buildargs() {
    export BUILDARGS="
        --build-arg "USERNAME=$CONTAINERUSER" \
        --build-arg "UID=$CONTAINERUID" \
    "
}


set_run_args() {
    export ENVSETTINGS="--log-driver=syslog"
    export STARTCMD=''  # unset or blank to use image default
}


set_network() {
    # The docker0 bridge has dynamic addresses. whereas a custom bridge allows predictable addresses
    NETWORK=dockernet
    # create network if it does not exist
    $sudo docker network ls | awk '{print $2}' | grep $NETWORK > /dev/null
    if (( $? == 1)); then
        $sudo docker network create --driver bridge --subnet=10.1.1.0/24 \
                  -o com.docker.network.bridge.name=br-$NETWORK $NETWORK
    fi
    export NETWORKSETTINGS="
        --net $NETWORK
        --ip 10.1.1.${IMGID}
        --add-host=mariadb:10.1.1.24
        --add-host=sp4.test.portalverbund.gv.at/:10.1.1.${IMGID}
        -p 8088:80
    "
}


set_vol_mapping() {
    VOLMAPPING=''
    create_containeruser

    export VOLROOT="${DOCKERVOL_ROOT}/$CONTAINERNAME"  # container volumes on docker host
    export VOLMAPPING="
        -v $VOLROOT/etc/apache2:/etc/apache2:Z
        -v $VOLROOT/etc/pki/sign/certs:/etc/pki/sign/certs:ro
        -v $VOLROOT/etc/simplesaml/attributemap:/var/simplesaml/attributemap:Z
        -v $VOLROOT/etc/simplesaml/cert:/var/simplesaml/cert:Z
        -v $VOLROOT/etc/simplesaml/config:/var/simplesaml/config:Z
        -v $VOLROOT/var/simplesaml/metadata:/var/simplesaml/metadata:Z
        -v $VOLROOT/var/log/httpd:/var/log/apache2:Z
        -v $VOLROOT/var/log/simplesaml:/var/simplesaml/log:Z
        -v $VOLROOT/var/simplesaml/data:/var/simplesaml/data:Z
        -v $VOLROOT/var/www:/var/www:Z
    "

    # check that required read-only directories do exist (path relative to $VOLROOT)
    # chkdir etc/xyz

    # create if not existing; set owner for path on docker host relative to $VOLROOT
    createdir etc/apache2 $CONTAINERUSER
    createdir etc/simplesaml/attributemap $CONTAINERUSER
    createdir etc/simplesaml/cert $CONTAINERUSER
    createdir etc/simplesaml/config $CONTAINERUSER
    createdir var/log/httpd $CONTAINERUSER
    createdir var/log/simplesaml $CONTAINERUSER
    createdir var/simplesaml/data $CONTAINERUSER
    createdir var/simplesaml/metadata $CONTAINERUSER
    createdir var/www $CONTAINERUSER
}


# In most cases there is no need to make changesfrom here on

enable_x11_client() {
    # How to enable xclients in Docker containers: http://wiki.ros.org/docker/Tutorials/GUI
    export ENVSETTINGS="$ENVSETTINGS
        -e DISPLAY=$DISPLAY
    "
    export VOLMAPPING="$VOLMAPPING
        -v /tmp/.X11-unix/:/tmp/.X11-unix:Z
    "
}


enable_pkcs11() {
    #enable Smartcard Reader in Docker
    # --privileged mapping of usb devices allows a generic configreation without knowing the
    # USB device name. Alternatively, devices can be mapped using '--device'
    export VOLMAPPING="$VOLMAPPING
        --privileged -v /dev/bus/usb:/dev/bus/usb
    "
}


create_containeruser() {
    # first start: create user/group/host directories
    if ! id -u $CONTAINERUSER &>/dev/null; then
        if [[ ${OSTYPE//[0-9.]/} == 'darwin' ]]; then  # OSX
                $sudo sudo dseditgroup -o create -i $CONTAINERUID $CONTAINERUSER
                $sudo dscl . create /Users/$CONTAINERUSER UniqueID $CONTAINERUID
                $sudo dscl . create /Users/$CONTAINERUSER PrimaryGroupID $CONTAINERUID
        else  # Linux
          source /etc/os-release
          case $ID in
            centos|fedora|rhel)
                $sudo groupadd --non-unique -g $CONTAINERUID $CONTAINERUSER || true
                $sudo adduser --non-unique -M --gid $CONTAINERUID --comment "" --uid $CONTAINERUID $CONTAINERUSER
                ;;
            debian|ubuntu)
                $sudo groupadd -g $CONTAINERUID $CONTAINERUSER
                $sudo adduser --gid $CONTAINERUID --no-create-home --disabled-password --gecos "" --uid $CONTAINERUID $CONTAINERUSER
                ;;
            *)
                echo "do not know how to add user/group for OS ${OSTYPE} ${NAME}"
                ;;
          esac
        fi
    fi
}


enable_sshd() {
    # add settings to start sshd (for remote debugging)
    export NETWORKSETTINGS="$NETWORKSETTINGS -p 2022:2022"
    export VOLMAPPING="$VOLMAPPING -v $VOLROOT/opt/ssh:/opt/ssh:Z"
    export STARTCMD='/start_sshd.sh'  # need to have this script installed in image
}


init_sudo() {
    if [ $(id -u) -ne 0 ]; then
        sudo="sudo"
    fi
}

chkdir() {
    dir=$1
    if [ ! -e "$VOLROOT/$dir" ]; then
        echo "$0: Missing directory: $VOLROOT/$dir"
        exit 1
    fi
}


createdir() {
    dir=$1; user=$2
    $sudo mkdir -p "$VOLROOT/$dir"
    $sudo chown -R $user:$user "$VOLROOT/$dir"
}


main
